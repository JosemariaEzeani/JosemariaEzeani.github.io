{"version":3,"sources":["webpack:///./src/components/budget/Switch.js","webpack:///./src/components/budget/Settings.js","webpack:///./src/pages/budget-app.js","webpack:///./src/pages/budget/Budget.js","webpack:///./src/pages/budget/Plan.js","webpack:///./src/components/budget/Emoji.js","webpack:///./src/pages/budget/Profile.js","webpack:///./src/styles/budget/titles.module.scss"],"names":["Switch","status","handleSwitch","className","type","checked","onChange","ConnectedClearButton","connect","value","dispatch","clearAll","updateSession","clear","Button","label","colour","handleClick","Settings","useState","currentSession","greenIDLabel","setGreenIDLabel","Input","name","placeholder","eventHandler","e","target","ID","smartMode","setSmartMode","Well","styles","IDSwitchSeperator","IDInputSeperator","flexCenter","htmlFor","SecondPage","Layout","SEO","title","heading","Emoji","description","emoji","subHeading","default","Profile","Plan","companies","DEFAULT_COMPANIES","banks","DEFAULT_BANKS","Budget","accounts","ConnectedBudget","portfolio","transactions","analysis","Tools","ACCOUNTS_HEADINGS","concat","types","TRANSACTIONS_HEADINGS","TRANSACTIONS_ARRAY","getArray","TRANSACTIONS_ID","i","ii","iii","iiii","id","index","TRANSACTIONS_OPTIONS_2","length","ANALYSIS_ARRAY","ANALYSIS_ID","ANALYSIS_HEADINGS","ANALYSIS_OPTIONS_2","multipleSelection","details","headings","inputs","ConnectedPlan","setup","portfolioDetails","STRUCTURE_HEADINGS","STRUCTURE_ARRAY","STRUCTURE_ID","text","role","aria-label","ConnectedProfile","calculator","ACCOUNTS_ARRAY","ACCOUNTS_ID","ACCOUNTS_OPTIONS_1","ACCOUNTS_OPTIONS_2","INCOME_ARRAY","INCOME_ID","INCOME_HEADINGS","INCOME_OPTIONS_3","isBlank","toString","trim","income","deductions","indexOf","parseFloat","filter","asSterling","Intl","NumberFormat","style","currency","format","gIncome","nIncome","iTax","personalAllowanceLimit","basicRateLimit","getTax","nInsurance","amount","getnInsurance","uLoan1","getULoan1","uLoan2","getULoan2","pLoan","getPLoan","module","exports"],"mappings":"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","file":"component---src-pages-budget-app-js-6f798b3c6bfed02cf997.js","sourcesContent":["import React from \"react\"\r\nimport \"../../styles/budget/switch.scss\"\r\n\r\nconst Switch = ({ status, handleSwitch }) => (\r\n  <label className=\"switch\">\r\n    <input type=\"checkbox\" checked={status} onChange={handleSwitch} />\r\n    <span className=\"slider\"></span>\r\n  </label>\r\n)\r\n\r\nexport default Switch\r\n","import React, { useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Well from \"./Well\"\r\nimport Button from \"./Button\"\r\nimport Switch from \"./Switch\"\r\nimport Input from \"./Input\"\r\n\r\nimport styles from \"../../styles/budget/tools.module.scss\"\r\n\r\nimport { updateSession, clear } from \"../../state/actionTypes\"\r\n\r\nimport {\r\n  DEFAULT_CALCULATOR,\r\n  DEFAULT_ANALYSIS,\r\n  DEFAULT_PORTFOLIO,\r\n  DEFAULT_SETUP,\r\n  DEFAULT_TRANSACTIONS,\r\n} from \"../../models/budget/tables\"\r\n\r\nimport { clearButtonTypes } from \"../../types/budget/types\"\r\n\r\n// START of CLEARBUTTON CLASS\r\nconst ClearButton = ({ clearAll }) => (\r\n  <Button label=\"Clear\" colour=\"red\" handleClick={clearAll} />\r\n)\r\n\r\nClearButton.propTypes = clearButtonTypes\r\n\r\nconst mapStateToProps = ({ value }) => {\r\n  return { value }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    clearAll: () => {\r\n      dispatch(updateSession(\"\"))\r\n      dispatch(clear())\r\n    },\r\n  }\r\n}\r\n\r\nconst ConnectedClearButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ClearButton)\r\n\r\n// START OF SETTINGS CLASS\r\nconst Settings = () => {\r\n  const [currentSession, setCurrentSession] = useState(\"Hello World!\")\r\n  const [greenIDLabel, setGreenIDLabel] = useState(\"Load\")\r\n\r\n  const handleIDChange = e =>\r\n    e.target.value !== currentSession\r\n      ? setGreenIDLabel(\"Load\")\r\n      : setGreenIDLabel(\"Copy\")\r\n\r\n  const [ID, setID] = useState(\r\n    <Input\r\n      type={\"text\"}\r\n      name={\"Session ID\"}\r\n      placeholder={[\"Provide Session ID\"]}\r\n      eventHandler={handleIDChange}\r\n    />\r\n  )\r\n  const [smartMode, setSmartMode] = useState(true)\r\n\r\n  const handleSwitch = () => setSmartMode(!smartMode)\r\n\r\n  const handleDumbClick = () => {\r\n    if (smartMode === true) handleSwitch()\r\n  }\r\n\r\n  const handleSmartClick = () => {\r\n    if (smartMode === false) handleSwitch()\r\n  }\r\n\r\n  return (\r\n    <Well>\r\n      <div className={styles.IDSwitchSeperator}>\r\n        <div className={styles.IDInputSeperator}>\r\n          <div className={styles.flexCenter}>\r\n            <label htmlFor=\"Session ID\">Session ID</label>\r\n            {ID}\r\n          </div>\r\n          <div className={styles.flexCenter}>\r\n            <Button label={greenIDLabel} colour=\"green\" />\r\n            <Button label=\"↻\" colour=\"orange\" />\r\n            <ConnectedClearButton />\r\n          </div>\r\n        </div>\r\n        <div className={styles.flexCenter}>\r\n          <Button label=\"🤪\" colour=\"red\" handleClick={handleDumbClick} />\r\n          <Switch status={smartMode} handleSwitch={handleSwitch} />\r\n          {/* Estimate Tax and NI*/}\r\n          <Button label=\"🤓\" colour=\"green\" handleClick={handleSmartClick} />\r\n        </div>\r\n      </div>\r\n    </Well>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import React from \"react\"\n\nimport Layout from \"../components/budget/Layout\"\nimport SEO from \"../components/SEO\"\nimport Profile from \"./budget/Profile\"\nimport Plan from \"./budget/Plan\"\nimport Budget from \"./budget/Budget\"\nimport Emoji from \"../components/budget/Emoji\"\nimport Settings from \"../components/budget/Settings\"\nimport Well from \"../components/budget/Well\"\n\nimport styles from \"../styles/budget/titles.module.scss\"\nimport \"../styles/budget/budget.scss\"\nimport { DEFAULT_COMPANIES, DEFAULT_BANKS } from \"../models/budget/tables\"\n\nconst SecondPage = () => {\n  return (\n    <Layout>\n      <SEO title=\"Budget App\" />\n      <Well>\n        <h2 className={styles.heading}>PRUDENCE</h2>\n        <Emoji description=\"bag of money\" emoji=\"💰\" />\n        <h2 className={styles.subHeading}>PFP v1.0</h2>\n      </Well>\n      <Settings default=\"\" />\n      <Profile />\n      <Plan companies={DEFAULT_COMPANIES} banks={DEFAULT_BANKS} />\n      <Budget accounts={DEFAULT_BANKS} />\n    </Layout>\n  )\n}\n\nexport default SecondPage\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Well from \"../../components/budget/Well\"\r\nimport Input from \"../../components/budget/Input\"\r\nimport Table from \"../../components/budget/Table\"\r\nimport Chart from \"../../components/budget/Chart\"\r\n\r\nimport {\r\n  getArray,\r\n  ACCOUNTS_HEADINGS,\r\n  TRANSACTIONS_ID,\r\n  ANALYSIS_ID,\r\n  TRANSACTIONS_HEADINGS,\r\n  ANALYSIS_HEADINGS,\r\n  TRANSACTIONS_OPTIONS_2,\r\n  ANALYSIS_OPTIONS_2,\r\n} from \"../../models/budget/tables\"\r\nimport { budgetTypes } from \"../../types/budget/types\"\r\n\r\nimport * as Tools from \"../../models/budget/Tools\"\r\n\r\nconst Budget = ({ portfolio, transactions, analysis }) => {\r\n  let accounts = Tools.getAccounts(portfolio, ACCOUNTS_HEADINGS)\r\n  accounts = [\"Click to Select Account\"].concat(accounts)\r\n  let types = Tools.getTypes(transactions, TRANSACTIONS_HEADINGS)\r\n  types = [\"Select Types in Group\"].concat(types)\r\n\r\n  const TRANSACTIONS_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input\r\n      id={TRANSACTIONS_ID}\r\n      index={i}\r\n      type={\"select\"}\r\n      name={TRANSACTIONS_HEADINGS[0]}\r\n      placeholder={accounts}\r\n    />,\r\n    <Input\r\n      id={TRANSACTIONS_ID}\r\n      index={ii}\r\n      type={\"number\"}\r\n      name={TRANSACTIONS_HEADINGS[1]}\r\n      placeholder={[\"Debit/Credit\"]}\r\n    />,\r\n    <Input\r\n      id={TRANSACTIONS_ID}\r\n      index={iii}\r\n      type={\"text\"}\r\n      name={TRANSACTIONS_HEADINGS[2]}\r\n      placeholder={TRANSACTIONS_OPTIONS_2}\r\n    />,\r\n    <Input\r\n      id={TRANSACTIONS_ID}\r\n      index={iiii}\r\n      type={\"date\"}\r\n      name={TRANSACTIONS_HEADINGS[3]}\r\n    />,\r\n  ]\r\n\r\n  const TRANSACTIONS_ARRAY = getArray(\r\n    TRANSACTIONS_ID,\r\n    TRANSACTIONS_INPUTS,\r\n    transactions.length\r\n  )\r\n\r\n  const ANALYSIS_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input\r\n      id={ANALYSIS_ID}\r\n      index={i}\r\n      type={\"date\"}\r\n      name={ANALYSIS_HEADINGS[0]}\r\n    />,\r\n    <Input\r\n      id={ANALYSIS_ID}\r\n      index={ii}\r\n      type={\"date\"}\r\n      name={ANALYSIS_HEADINGS[1]}\r\n    />,\r\n    <Input\r\n      id={ANALYSIS_ID}\r\n      index={iii}\r\n      type={\"text\"}\r\n      name={ANALYSIS_HEADINGS[2]}\r\n      placeholder={ANALYSIS_OPTIONS_2}\r\n    />,\r\n    <Input\r\n      id={ANALYSIS_ID}\r\n      index={iiii}\r\n      type={\"select\"}\r\n      name={ANALYSIS_HEADINGS[3]}\r\n      placeholder={types}\r\n      multipleSelection={true}\r\n    />,\r\n  ]\r\n\r\n  const ANALYSIS_ARRAY = getArray(ANALYSIS_ID, ANALYSIS_INPUTS, analysis.length)\r\n\r\n  return (\r\n    <>\r\n      <Well>\r\n        <Chart type=\"expenses\" index={1} details=\"Cumulative Expenses\" />\r\n        <h5>Transactions:</h5> {/* implement [Monthly/Annually]  */}\r\n        <Table headings={TRANSACTIONS_HEADINGS} inputs={TRANSACTIONS_ARRAY} />\r\n      </Well>\r\n      <Well>\r\n        <Chart type=\"groupings\" index={2} details=\"Categories of Expenses\" />\r\n        <h5>Analysis:</h5> {/* implement [Monthly/Annually]  */}\r\n        <Table headings={ANALYSIS_HEADINGS} inputs={ANALYSIS_ARRAY} />\r\n      </Well>\r\n    </>\r\n  )\r\n}\r\n\r\nBudget.propTypes = budgetTypes\r\n\r\nconst mapStateToProps = ({ portfolio, transactions, analysis }) => {\r\n  return { portfolio, transactions, analysis }\r\n}\r\n// const mapDispatchToProps = dispatch => {\r\n//   return { clear: text => dispatch(resizeSession(text)) }\r\n// }\r\n\r\n// const ConnectedBudget = connect(mapStateToProps, mapDispatchToProps)(Budget)\r\nconst ConnectedBudget = connect(mapStateToProps, null)(Budget)\r\n\r\nexport default ConnectedBudget\r\n\r\n// markers\r\n// delta: accounts deductions marker (z)\r\n// alpha: accounts value marker (y)\r\n// beta: expenses value marker (x)\r\n// gamma: incomes value marker (w)\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Well from \"../../components/budget/Well\"\r\nimport Input from \"../../components/budget/Input\"\r\nimport * as Tools from \"../../models/budget/Tools\"\r\nimport Table from \"../../components/budget/Table\"\r\nimport Chart from \"../../components/budget/Chart\"\r\nimport {\r\n  getArray,\r\n  STRUCTURE_ID,\r\n  STRUCTURE_HEADINGS,\r\n} from \"../../models/budget/tables\"\r\nimport { planTypes } from \"../../types/budget/types\"\r\n\r\nconst Plan = ({ portfolio, setup }) => {\r\n  let portfolioDetails = Tools.getAccounts(portfolio, STRUCTURE_HEADINGS)\r\n  portfolioDetails = [\"Click to Select Account\"].concat(portfolioDetails)\r\n\r\n  const STRUCTURE_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input\r\n      id={STRUCTURE_ID}\r\n      index={i}\r\n      type={\"select\"}\r\n      name={\"Source\"}\r\n      placeholder={portfolioDetails}\r\n    />,\r\n    <Input\r\n      id={STRUCTURE_ID}\r\n      index={ii}\r\n      type={\"select\"}\r\n      name={\"Target\"}\r\n      placeholder={portfolioDetails}\r\n    />,\r\n    <Input\r\n      id={STRUCTURE_ID}\r\n      index={iii}\r\n      type={\"number\"}\r\n      name={\"Value\"}\r\n      placeholder={[\"Opening Balance Contribution\"]}\r\n    />,\r\n    <Input\r\n      id={STRUCTURE_ID}\r\n      index={iiii}\r\n      type={\"date\"}\r\n      name={\"Date\"}\r\n      placeholder={[Tools.getDate()]}\r\n    />,\r\n  ]\r\n\r\n  const STRUCTURE_ARRAY = getArray(STRUCTURE_ID, STRUCTURE_INPUTS, setup.length)\r\n\r\n  return (\r\n    <>\r\n      <Well>\r\n        <Chart type=\"accounts\" index={0} details=\"Accounts Balance\" />\r\n        <h4>SetUp:</h4>\r\n        <Table headings={STRUCTURE_HEADINGS} inputs={STRUCTURE_ARRAY} />\r\n      </Well>\r\n    </>\r\n  )\r\n}\r\n\r\nPlan.propTypes = planTypes\r\n\r\nconst mapStateToProps = ({ setup, portfolio }) => {\r\n  return { setup, portfolio }\r\n}\r\n// const mapDispatchToProps = dispatch => {\r\n//   return { clear: text => dispatch(resizeSession(text)) }\r\n// }\r\n\r\n// const ConnectedPlan = connect(mapStateToProps, mapDispatchToProps)(Plan)\r\nconst ConnectedPlan = connect(mapStateToProps, null)(Plan)\r\n\r\nexport default ConnectedPlan\r\n","import React from \"react\"\r\nimport styles from \"../../styles/budget/titles.module.scss\"\r\n\r\nconst Emoji = ({ description, emoji, text }) => (\r\n  <span className={styles.emoji} role=\"img\" aria-label={description}>\r\n    {emoji}\r\n    <h4>{text}</h4>\r\n  </span>\r\n)\r\n\r\nexport default Emoji\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Well from \"../../components/budget/Well\"\r\nimport Input from \"../../components/budget/Input\"\r\nimport Table from \"../../components/budget/Table\"\r\n\r\nimport {\r\n  DEFAULT_BANKS,\r\n  DEFAULT_COMPANIES,\r\n  getArray,\r\n  ACCOUNTS_ID,\r\n  INCOME_ID,\r\n  ACCOUNTS_HEADINGS,\r\n  INCOME_HEADINGS,\r\n  ACCOUNTS_OPTIONS_1,\r\n  ACCOUNTS_OPTIONS_2,\r\n  INCOME_OPTIONS_3,\r\n} from \"../../models/budget/tables\"\r\nimport { profileTypes } from \"../../types/budget/types\"\r\n\r\nconst Profile = ({ portfolio, calculator }) => {\r\n  const ACCOUNTS_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={i}\r\n      type={\"text\"}\r\n      name={ACCOUNTS_HEADINGS[0]}\r\n      placeholder={DEFAULT_BANKS.concat(DEFAULT_COMPANIES)}\r\n    />,\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={ii}\r\n      type={\"text\"}\r\n      name={ACCOUNTS_HEADINGS[1]}\r\n      placeholder={ACCOUNTS_OPTIONS_1}\r\n    />,\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={iii}\r\n      type={\"text\"}\r\n      name={ACCOUNTS_HEADINGS[2]}\r\n      placeholder={ACCOUNTS_OPTIONS_2}\r\n    />,\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={iiii}\r\n      type={\"number\"}\r\n      name={ACCOUNTS_HEADINGS[3]}\r\n      placeholder={[\"Closing Balance\"]}\r\n    />,\r\n  ]\r\n\r\n  const ACCOUNTS_ARRAY = getArray(\r\n    ACCOUNTS_ID,\r\n    ACCOUNTS_INPUTS,\r\n    portfolio.length\r\n  )\r\n\r\n  const INCOME_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input id={INCOME_ID} index={i} type={\"date\"} name={INCOME_HEADINGS[0]} />,\r\n    <Input id={INCOME_ID} index={ii} type={\"date\"} name={INCOME_HEADINGS[1]} />,\r\n    <Input\r\n      id={INCOME_ID}\r\n      index={iii}\r\n      type={\"number\"}\r\n      name={INCOME_HEADINGS[2]}\r\n      placeholder={[\"Income/Deduction\"]}\r\n    />,\r\n    <Input\r\n      id={INCOME_ID}\r\n      index={iiii}\r\n      type={\"select\"}\r\n      name={INCOME_HEADINGS[3]}\r\n      placeholder={INCOME_OPTIONS_3}\r\n    />,\r\n  ]\r\n\r\n  const INCOME_ARRAY = getArray(INCOME_ID, INCOME_INPUTS, calculator.length)\r\n\r\n  const isBlank = value => {\r\n    return (\r\n      value === null ||\r\n      value === undefined ||\r\n      value === 0 ||\r\n      value.toString().trim() === \"\" ||\r\n      value.toString().trim() === \"Click to SELECT Type\"\r\n    )\r\n  }\r\n\r\n  const include = index => {\r\n    return !(\r\n      isBlank(calculator[index + 1]) ||\r\n      isBlank(calculator[index]) ||\r\n      isBlank(calculator[index - 1]) ||\r\n      isBlank(calculator[index - 2])\r\n    )\r\n  }\r\n\r\n  let income = 0\r\n  let deductions = 0\r\n\r\n  const filter = () => {\r\n    for (let i = 2; i < calculator.length; i += 4) {\r\n      if (include(i)) {\r\n        if (\r\n          [\"Employment (e.g. salary)\", \"Other Income\"].indexOf(\r\n            calculator[i + 1]\r\n          ) === -1\r\n        ) {\r\n          deductions += parseFloat(calculator[i])\r\n        } else income += parseFloat(calculator[i])\r\n      }\r\n    }\r\n  }\r\n  filter()\r\n\r\n  const asSterling = value =>\r\n    new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"GBP\",\r\n    }).format(value)\r\n  const gIncome = asSterling(income)\r\n  const nIncome = asSterling(income - deductions)\r\n\r\n  const getTax = income => {\r\n    let personalAllowanceLimit = 12500,\r\n      basicRateLimit = 50000,\r\n      higherRateLimit = 150000,\r\n      basicRateAmount,\r\n      higherRateAmount,\r\n      additionalRateAmount,\r\n      basicRate = 0.2,\r\n      higherRate = 0.4,\r\n      additionalRate = 0.45\r\n    if (income <= personalAllowanceLimit) return 0\r\n    if (income >= personalAllowanceLimit + 1 && income <= basicRateLimit) {\r\n      basicRateAmount = (income - personalAllowanceLimit + 1) * basicRate\r\n      return basicRateAmount\r\n    }\r\n    if (income > 120000) {\r\n      personalAllowanceLimit = 0\r\n    } else {\r\n      personalAllowanceLimit -= (income - 100000) / 2\r\n    }\r\n    if (income >= basicRateLimit + 1 && income <= higherRateLimit) {\r\n      basicRateAmount =\r\n        (basicRateLimit - personalAllowanceLimit + 1) * basicRate\r\n      higherRateAmount = (income - basicRateLimit + 1) * higherRate\r\n      return basicRateAmount + higherRateAmount\r\n    }\r\n    if (income > higherRateLimit) {\r\n      basicRateAmount =\r\n        (basicRateLimit - personalAllowanceLimit + 1) * basicRate\r\n      higherRateAmount = (higherRateLimit - basicRateLimit + 1) * higherRate\r\n      additionalRateAmount = (income - higherRateLimit + 1) * additionalRate\r\n      return basicRateAmount + higherRateAmount + additionalRateAmount\r\n    }\r\n  }\r\n\r\n  const iTax = asSterling(getTax(income))\r\n\r\n  const getnInsurance = income => {\r\n    let amount,\r\n      lowerEarningsLimit,\r\n      primaryThreshold = 9504,\r\n      secondaryThreshold,\r\n      UpperEarningsLimit = 50004\r\n    if (income <= primaryThreshold) return 0\r\n    if (income > primaryThreshold && income <= UpperEarningsLimit)\r\n      return (income - primaryThreshold) * 0.12\r\n    if (income > UpperEarningsLimit) {\r\n      amount = (UpperEarningsLimit - primaryThreshold) * 0.12\r\n      amount += (income - UpperEarningsLimit) * 0.02\r\n      return amount\r\n    }\r\n  }\r\n\r\n  const nInsurance = asSterling(getnInsurance(income))\r\n\r\n  const getULoan1 = income => {\r\n    if (income > 19380) return (income - 19390) * 0.09\r\n    return 0\r\n  }\r\n\r\n  const getULoan2 = income => {\r\n    if (income > 26568) return (income - 26568) * 0.09\r\n    return 0\r\n  }\r\n\r\n  const uLoan1 = asSterling(getULoan1(income))\r\n  const uLoan2 = asSterling(getULoan2(income))\r\n\r\n  const getPLoan = income => {\r\n    if (income > 21000) return (income - 21000) * 0.09\r\n    return 0\r\n  }\r\n\r\n  const pLoan = asSterling(getPLoan(income))\r\n\r\n  return (\r\n    <>\r\n      <Well>\r\n        <div>\r\n          <h5>Calculator:</h5>\r\n          <Table headings={INCOME_HEADINGS} inputs={INCOME_ARRAY} />\r\n          <output name=\"income\" htmlFor=\"\">\r\n            <details>\r\n              <summary>\r\n                Need help with Income Tax, National Insurance, and Student Loan\r\n                Repayment calculations?\r\n              </summary>\r\n              <p>Income Tax Estimation = {iTax}</p>\r\n              <p>National Insurance Estimation = {nInsurance}</p>\r\n              <p>Undergraduate Plan 1 Loan Estimation = {uLoan1}</p>\r\n              <p>Undergraduate Plan 2 Loan Estimation = {uLoan2}</p>\r\n              <p>Postgraduate Loan Estimation = {pLoan}</p>\r\n            </details>\r\n            <p>Gross Income = {gIncome}</p>\r\n            <p>Net Income = {nIncome}</p>\r\n          </output>\r\n        </div>\r\n      </Well>\r\n      <Well>\r\n        <h5>Portfolio:</h5>\r\n        <Table headings={ACCOUNTS_HEADINGS} inputs={ACCOUNTS_ARRAY} />\r\n      </Well>\r\n    </>\r\n  )\r\n}\r\n\r\nProfile.propTypes = profileTypes\r\n\r\nconst mapStateToProps = ({ portfolio, calculator }) => {\r\n  return { portfolio, calculator }\r\n}\r\n// const mapDispatchToProps = dispatch => {\r\n//   return { clear: text => dispatch(resizeSession(text)) }\r\n// }\r\n\r\n// const ConnectedPlan = connect(mapStateToProps, mapDispatchToProps)(Plan)\r\nconst ConnectedProfile = connect(mapStateToProps, null)(Profile)\r\n\r\nexport default ConnectedProfile\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"titles-module--heading--1ViTX\",\"emoji\":\"titles-module--emoji--5WcdL\",\"subHeading\":\"titles-module--subHeading--3DK4v\"};"],"sourceRoot":""}