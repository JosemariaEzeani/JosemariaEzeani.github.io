{"version":3,"sources":["webpack:///./src/pages/budget/Profile.js"],"names":["ConnectedProfile","connect","portfolio","calculator","ACCOUNTS_ARRAY","getArray","ACCOUNTS_ID","i","ii","iii","iiii","id","index","type","name","ACCOUNTS_HEADINGS","placeholder","DEFAULT_BANKS","concat","DEFAULT_COMPANIES","ACCOUNTS_OPTIONS_1","ACCOUNTS_OPTIONS_2","length","INCOME_ARRAY","INCOME_ID","INCOME_HEADINGS","INCOME_OPTIONS_3","isBlank","value","toString","trim","income","deductions","indexOf","parseFloat","filter","asSterling","Intl","NumberFormat","style","currency","format","gIncome","nIncome","iTax","personalAllowanceLimit","basicRateLimit","getTax","nInsurance","amount","getnInsurance","uLoan1","getULoan1","uLoan2","getULoan2","pLoan","getPLoan","headings","inputs","htmlFor"],"mappings":"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","file":"component---src-pages-budget-profile-js-888400111a016560489d.js","sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Well from \"../../components/budget/Well\"\r\nimport Input from \"../../components/budget/Input\"\r\nimport Table from \"../../components/budget/Table\"\r\n\r\nimport {\r\n  DEFAULT_BANKS,\r\n  DEFAULT_COMPANIES,\r\n  getArray,\r\n  ACCOUNTS_ID,\r\n  INCOME_ID,\r\n  ACCOUNTS_HEADINGS,\r\n  INCOME_HEADINGS,\r\n  ACCOUNTS_OPTIONS_1,\r\n  ACCOUNTS_OPTIONS_2,\r\n  INCOME_OPTIONS_3,\r\n} from \"../../models/budget/tables\"\r\nimport { profileTypes } from \"../../types/budget/types\"\r\n\r\nconst Profile = ({ portfolio, calculator }) => {\r\n  const ACCOUNTS_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={i}\r\n      type={\"text\"}\r\n      name={ACCOUNTS_HEADINGS[0]}\r\n      placeholder={DEFAULT_BANKS.concat(DEFAULT_COMPANIES)}\r\n    />,\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={ii}\r\n      type={\"text\"}\r\n      name={ACCOUNTS_HEADINGS[1]}\r\n      placeholder={ACCOUNTS_OPTIONS_1}\r\n    />,\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={iii}\r\n      type={\"text\"}\r\n      name={ACCOUNTS_HEADINGS[2]}\r\n      placeholder={ACCOUNTS_OPTIONS_2}\r\n    />,\r\n    <Input\r\n      id={ACCOUNTS_ID}\r\n      index={iiii}\r\n      type={\"number\"}\r\n      name={ACCOUNTS_HEADINGS[3]}\r\n      placeholder={[\"Closing Balance\"]}\r\n    />,\r\n  ]\r\n\r\n  const ACCOUNTS_ARRAY = getArray(\r\n    ACCOUNTS_ID,\r\n    ACCOUNTS_INPUTS,\r\n    portfolio.length\r\n  )\r\n\r\n  const INCOME_INPUTS = (i, ii, iii, iiii) => [\r\n    <Input id={INCOME_ID} index={i} type={\"date\"} name={INCOME_HEADINGS[0]} />,\r\n    <Input id={INCOME_ID} index={ii} type={\"date\"} name={INCOME_HEADINGS[1]} />,\r\n    <Input\r\n      id={INCOME_ID}\r\n      index={iii}\r\n      type={\"number\"}\r\n      name={INCOME_HEADINGS[2]}\r\n      placeholder={[\"Income/Deduction\"]}\r\n    />,\r\n    <Input\r\n      id={INCOME_ID}\r\n      index={iiii}\r\n      type={\"select\"}\r\n      name={INCOME_HEADINGS[3]}\r\n      placeholder={INCOME_OPTIONS_3}\r\n    />,\r\n  ]\r\n\r\n  const INCOME_ARRAY = getArray(INCOME_ID, INCOME_INPUTS, calculator.length)\r\n\r\n  const isBlank = value => {\r\n    return (\r\n      value === null ||\r\n      value === undefined ||\r\n      value === 0 ||\r\n      value.toString().trim() === \"\" ||\r\n      value.toString().trim() === \"Click to SELECT Type\"\r\n    )\r\n  }\r\n\r\n  const include = index => {\r\n    return !(\r\n      isBlank(calculator[index + 1]) ||\r\n      isBlank(calculator[index]) ||\r\n      isBlank(calculator[index - 1]) ||\r\n      isBlank(calculator[index - 2])\r\n    )\r\n  }\r\n\r\n  let income = 0\r\n  let deductions = 0\r\n\r\n  const filter = () => {\r\n    for (let i = 2; i < calculator.length; i += 4) {\r\n      if (include(i)) {\r\n        if (\r\n          [\"Employment (e.g. salary)\", \"Other Income\"].indexOf(\r\n            calculator[i + 1]\r\n          ) === -1\r\n        ) {\r\n          deductions += parseFloat(calculator[i])\r\n        } else income += parseFloat(calculator[i])\r\n      }\r\n    }\r\n  }\r\n  filter()\r\n\r\n  const asSterling = value =>\r\n    new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"GBP\",\r\n    }).format(value)\r\n  const gIncome = asSterling(income)\r\n  const nIncome = asSterling(income - deductions)\r\n\r\n  const getTax = income => {\r\n    let personalAllowanceLimit = 12500,\r\n      basicRateLimit = 50000,\r\n      higherRateLimit = 150000,\r\n      basicRateAmount,\r\n      higherRateAmount,\r\n      additionalRateAmount,\r\n      basicRate = 0.2,\r\n      higherRate = 0.4,\r\n      additionalRate = 0.45\r\n    if (income <= personalAllowanceLimit) return 0\r\n    if (income >= personalAllowanceLimit + 1 && income <= basicRateLimit) {\r\n      basicRateAmount = (income - personalAllowanceLimit + 1) * basicRate\r\n      return basicRateAmount\r\n    }\r\n    if (income > 120000) {\r\n      personalAllowanceLimit = 0\r\n    } else {\r\n      personalAllowanceLimit -= (income - 100000) / 2\r\n    }\r\n    if (income >= basicRateLimit + 1 && income <= higherRateLimit) {\r\n      basicRateAmount =\r\n        (basicRateLimit - personalAllowanceLimit + 1) * basicRate\r\n      higherRateAmount = (income - basicRateLimit + 1) * higherRate\r\n      return basicRateAmount + higherRateAmount\r\n    }\r\n    if (income > higherRateLimit) {\r\n      basicRateAmount =\r\n        (basicRateLimit - personalAllowanceLimit + 1) * basicRate\r\n      higherRateAmount = (higherRateLimit - basicRateLimit + 1) * higherRate\r\n      additionalRateAmount = (income - higherRateLimit + 1) * additionalRate\r\n      return basicRateAmount + higherRateAmount + additionalRateAmount\r\n    }\r\n  }\r\n\r\n  const iTax = asSterling(getTax(income))\r\n\r\n  const getnInsurance = income => {\r\n    let amount,\r\n      lowerEarningsLimit,\r\n      primaryThreshold = 9504,\r\n      secondaryThreshold,\r\n      UpperEarningsLimit = 50004\r\n    if (income <= primaryThreshold) return 0\r\n    if (income > primaryThreshold && income <= UpperEarningsLimit)\r\n      return (income - primaryThreshold) * 0.12\r\n    if (income > UpperEarningsLimit) {\r\n      amount = (UpperEarningsLimit - primaryThreshold) * 0.12\r\n      amount += (income - UpperEarningsLimit) * 0.02\r\n      return amount\r\n    }\r\n  }\r\n\r\n  const nInsurance = asSterling(getnInsurance(income))\r\n\r\n  const getULoan1 = income => {\r\n    if (income > 19380) return (income - 19390) * 0.09\r\n    return 0\r\n  }\r\n\r\n  const getULoan2 = income => {\r\n    if (income > 26568) return (income - 26568) * 0.09\r\n    return 0\r\n  }\r\n\r\n  const uLoan1 = asSterling(getULoan1(income))\r\n  const uLoan2 = asSterling(getULoan2(income))\r\n\r\n  const getPLoan = income => {\r\n    if (income > 21000) return (income - 21000) * 0.09\r\n    return 0\r\n  }\r\n\r\n  const pLoan = asSterling(getPLoan(income))\r\n\r\n  return (\r\n    <>\r\n      <Well>\r\n        <div>\r\n          <h5>Calculator:</h5>\r\n          <Table headings={INCOME_HEADINGS} inputs={INCOME_ARRAY} />\r\n          <output name=\"income\" htmlFor=\"\">\r\n            <details>\r\n              <summary>\r\n                Need help with Income Tax, National Insurance, and Student Loan\r\n                Repayment calculations?\r\n              </summary>\r\n              <p>Income Tax Estimation = {iTax}</p>\r\n              <p>National Insurance Estimation = {nInsurance}</p>\r\n              <p>Undergraduate Plan 1 Loan Estimation = {uLoan1}</p>\r\n              <p>Undergraduate Plan 2 Loan Estimation = {uLoan2}</p>\r\n              <p>Postgraduate Loan Estimation = {pLoan}</p>\r\n            </details>\r\n            <p>Gross Income = {gIncome}</p>\r\n            <p>Net Income = {nIncome}</p>\r\n          </output>\r\n        </div>\r\n      </Well>\r\n      <Well>\r\n        <h5>Portfolio:</h5>\r\n        <Table headings={ACCOUNTS_HEADINGS} inputs={ACCOUNTS_ARRAY} />\r\n      </Well>\r\n    </>\r\n  )\r\n}\r\n\r\nProfile.propTypes = profileTypes\r\n\r\nconst mapStateToProps = ({ portfolio, calculator }) => {\r\n  return { portfolio, calculator }\r\n}\r\n// const mapDispatchToProps = dispatch => {\r\n//   return { clear: text => dispatch(resizeSession(text)) }\r\n// }\r\n\r\n// const ConnectedPlan = connect(mapStateToProps, mapDispatchToProps)(Plan)\r\nconst ConnectedProfile = connect(mapStateToProps, null)(Profile)\r\n\r\nexport default ConnectedProfile\r\n"],"sourceRoot":""}